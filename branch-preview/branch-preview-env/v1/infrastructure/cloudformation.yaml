AWSTemplateFormatVersion: '2010-09-09'
Description: Fargate Cluster, ALB, public subnets
Mappings:
  # The VPC and subnet configuration is passed in via the environment spec.
  EnvironmentNameConfig:
    Environment:
      Name: '{{ environment.name}}'
  ResourceTagConfig:
    Project:
      Key: 'Cost:Project'
      Value: '{{ environment.inputs.project_base_name }}'
    Service:
      Key: 'Cost:Service'
      Value: '{{ environment.inputs.project_base_name }}-{{ environment.inputs.project_short_name }}'
    Env:
      Key: 'Cost:Env'
      Value: 'preview'
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.1.0/24'
    PublicTwo:
      CIDR: '10.0.2.0/24'
  ServiceConfig:
    CertificateArn:
      Value: '{{environment.inputs.service_certificate_arn}}'

Resources:
  # ------------------------------------------------------------#
  # VPC
  # ------------------------------------------------------------#
  # Create the VPC with subnets across 2 Availability Zones, 2 Public subnets, 2 Private subnets,
  # an Internet Gateway, 2 Nat Gateways and the required routetables and routes
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']
                - "public"
                - "1"

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']
                - "public"
                - "2"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetOne

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetTwo

  # ------------------------------------------------------------#
  # ECS (Fargate)
  # ------------------------------------------------------------#
  # Create the ECS Cluster to schedule and orchestrate the Fargate containers
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: '{{ environment.inputs.container_insights }}'
      Configuration:
        ExecuteCommandConfiguration:
          LogConfiguration:
            CloudWatchLogGroupName: '{{environment.name}}/ecs-exec'
          Logging: OVERRIDE
      Tags:
        - Key: Name
          Value: !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']
        - Key: !FindInMap ['ResourceTagConfig', 'Project', 'Key']
          Value: !FindInMap ['ResourceTagConfig', 'Project', 'Value']
        - Key: !FindInMap ['ResourceTagConfig', 'Service', 'Key']
          Value: !FindInMap ['ResourceTagConfig', 'Service', 'Value']
        - Key: !FindInMap ['ResourceTagConfig', 'Env', 'Key']
          Value: !FindInMap ['ResourceTagConfig', 'Env', 'Value']

  # A security group for the containers we will run in Fargate.
  # Rules are added to this security group based on what ingress you
  # add for the cluster.
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Tags:
        - Key: Name
          Value: !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']

  # ------------------------------------------------------------#
  # Applicatin Load Balancer
  # ------------------------------------------------------------#
  # Public load balancer, hosted in public subnets that is accessible
  # to the public, and is intended to route traffic to one or more public
  # facing services. This is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups:
        - !Ref PublicLoadBalancerSG
        - !GetAtt 
          - VPC
          - DefaultSecurityGroup
      Tags:
        - Key: Name
          Value: !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']
        - Key: !FindInMap ['ResourceTagConfig', 'Project', 'Key']
          Value: !FindInMap ['ResourceTagConfig', 'Project', 'Value']
        - Key: !FindInMap ['ResourceTagConfig', 'Service', 'Key']
          Value: !FindInMap ['ResourceTagConfig', 'Service', 'Value']
        - Key: !FindInMap ['ResourceTagConfig', 'Env', 'Key']
          Value: !FindInMap ['ResourceTagConfig', 'Env', 'Value']

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
      Tags:
        - Key: Name
          Value: !FindInMap ['EnvironmentNameConfig', 'Environment', 'Name']

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG

  PublicLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Port: 443
            Protocol: HTTPS
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  PublicLoadBalancerHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
            MessageBody: ''
            ContentType: 'text/html'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Certificates:
        - CertificateArn: !FindInMap ['ServiceConfig', 'CertificateArn', 'Value']
      Port: 443
      Protocol: HTTPS

# These output values will be available to service templates to use.
Outputs:
  CostProjectTagKey:
    Description: 'The tag key for Cost Category Tag'
    Value: !FindInMap ['ResourceTagConfig', 'Project', 'Key']
  CostProjectTagValue:
    Description: 'The tag value for Cost Category Tag'
    Value: !FindInMap ['ResourceTagConfig', 'Project', 'Value']
  CostServiceTagKey:
    Description: 'The tag key for Cost Category Tag'
    Value: !FindInMap ['ResourceTagConfig', 'Service', 'Key']
  CostServiceTagValue:
    Description: 'The tag value for Cost Category Tag'
    Value: !FindInMap ['ResourceTagConfig', 'Service', 'Value']
  CostEnvTagKey:
    Description: 'The tag key for Cost Category Tag'
    Value: !FindInMap ['ResourceTagConfig', 'Env', 'Key']
  CostEnvTagValue:
    Description: 'The tag value for Cost Category Tag'
    Value: !FindInMap ['ResourceTagConfig', 'Env', 'Value']
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
  ECSTaskExecutionRole:
    Description: The ARN of the ECS task execution role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
  VpcCIDR:
    Value: !GetAtt 
      - VPC
      - CidrBlock
  VpcDefaultSecurityGroup:
    Value: !GetAtt 
      - VPC
      - DefaultSecurityGroup
  PublicSubnetOne:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref 'PublicSubnetOne'
  PublicSubnetTwo:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref 'PublicSubnetTwo'
  ContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'ContainerSecurityGroup'
  PublicLoadBalancerEndpoint:
    Description: The URL to access the service
    Value: !Sub "http://${PublicLoadBalancer.DNSName}"
  PublicLoadBalancer:
    Value: !Ref PublicLoadBalancer
  PublicLoadBalancerHttpsListener:
    Value: !Ref PublicLoadBalancerHttpsListener
